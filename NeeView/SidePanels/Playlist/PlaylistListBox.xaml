<UserControl x:Class="NeeView.PlaylistListBox"
             x:Name="RootControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:NeeView"
             xmlns:nw="clr-namespace:NeeView.Windows"
             xmlns:nwc="clr-namespace:NeeView.Windows.Controls"
             xmlns:vwp="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
             xmlns:properties="clr-namespace:NeeView.Properties" 
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300" Foreground="{DynamicResource Panel.Foreground}">

    <UserControl.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Styles/PanelIcons.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Pen x:Key="pen_folder" Brush="{DynamicResource Panel.Foreground}" Thickness="1.25"/>

            <DrawingImage x:Key="fic_folder">
                <DrawingImage.Drawing>
                    <GeometryDrawing Pen="{StaticResource pen_folder}" Geometry="{StaticResource g_folder}" />
                </DrawingImage.Drawing>
            </DrawingImage>

            <DrawingImage x:Key="fic_folder_zip">
                <DrawingImage.Drawing>
                    <GeometryDrawing Pen="{StaticResource pen_folder}" Geometry="{StaticResource g_folder_zip}" />
                </DrawingImage.Drawing>
            </DrawingImage>

            <DrawingImage x:Key="fic_folder_media">
                <DrawingImage.Drawing>
                    <GeometryDrawing Pen="{StaticResource pen_folder}" Geometry="{StaticResource g_folder_media}" />
                </DrawingImage.Drawing>
            </DrawingImage>

            <DrawingImage x:Key="ic_lock_outline_24px">
                <DrawingImage.Drawing>
                    <DrawingGroup>
                        <GeometryDrawing Brush="Transparent" Geometry="{StaticResource g_rect24x24}" />
                        <GeometryDrawing Brush="{DynamicResource Control.GrayText}" Pen="{x:Null}" Geometry="{StaticResource g_lock_outline_24px}" />
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>

            <local:BooleanToTextWrappingConverter x:Key="BooleanToTextWrappingConverter" />
            <local:ArchiveEntryToDecoratePlaceNameConverter x:Key="ArchiveEntryToDecoratePlaceNameConverter" />
            <local:BrushAlphaToVisibilityConverter x:Key="BrushAlphaToVisibilityConverter" />
            <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityInverseConverter" True="Collapsed" False="Visible" />
            <local:BooleanToInverseVisibilityConverter x:Key="BooleanToInverseVisibilityConverter"/>
            <local:NullableToVisibilityConverter x:Key="NullableToVisibilityInverseConverter" True="Visible" False="Collapsed" />
            <local:BooleanReverseConverter x:Key="BooleanReverseConverter" />
            <local:StringNullOrWhiteSpaceToVisibilityConverter x:Key="StringNullOrWhiteSpaceToVisibilityInverseConverter" True="Collapsed" False="Visible" />
            <local:PlaylistItemToFolderImageSourceConverter x:Key="PlaylistItemToFolderImageSourceConverter" FolderImageSource="{StaticResource fic_folder}" FolderZipImageSource="{StaticResource fic_folder_zip}" FolderMediaImageSource="{StaticResource fic_folder_media}"/>

            <Style x:Key="NameStyle" TargetType="TextBlock">
                <Setter Property="Text" Value="{Binding Name}" />
                <Setter Property="Margin" Value="5,0" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
            </Style>

            <Style x:Key="NormalNameStyle" TargetType="TextBlock" BasedOn="{StaticResource NameStyle}">
            </Style>

            <Style x:Key="ContentNameStyle" TargetType="TextBlock" BasedOn="{StaticResource NameStyle}">
                <Setter Property="TextWrapping"
                        Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ContentItemProfile.IsTextWrapped, Converter={StaticResource BooleanToTextWrappingConverter}}" />
                <Setter Property="Height" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ContentItemProfile.LayoutedTextHeight}" />
            </Style>

            <Style x:Key="BannerrNameStyle" TargetType="TextBlock" BasedOn="{StaticResource NameStyle}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="TextWrapping"
                        Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.BannerItemProfile.IsTextWrapped, Converter={StaticResource BooleanToTextWrappingConverter}}" />
                <Setter Property="Height" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.BannerItemProfile.LayoutedTextHeight}" />
            </Style>

            <Style x:Key="ThumbnailNameStyle" TargetType="TextBlock" BasedOn="{StaticResource NameStyle}">
                <Setter Property="TextWrapping" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ThumbnailItemProfile.IsTextWrapped, Converter={StaticResource BooleanToTextWrappingConverter}}"/>
                <Setter Property="Height" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ThumbnailItemProfile.TextHeight}"/>
            </Style>


            <Style x:Key="OverrideIconStackPanelStyle" TargetType="StackPanel">
                <Setter Property="Visibility" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ThumbnailItemProfile.IsTextVisible, Converter={StaticResource BooleanToInverseVisibilityConverter}}"/>
                <Setter Property="Orientation" Value="Horizontal"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="Margin" Value="2,4"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="1" Opacity="0.5"/>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="NoteTextStyle" TargetType="TextBlock">
                <Setter Property="Margin" Value="5,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                <Setter Property="Foreground" Value="{DynamicResource Panel.Note}" />
                <Setter Property="Visibility" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource BrushAlphaToVisibilityConverter}}" />
            </Style>

            <Style x:Key="FolderIconStyle" TargetType="Image">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Source" Value="{Binding Converter={StaticResource PlaylistItemToFolderImageSourceConverter}}" />
                <Setter Property="Visibility" Value="{Binding IsArchive, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Style>

            <Style x:Key="DetailToolTipDockPanel" TargetType="{x:Type DockPanel}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=Root, Path=DataContext.DetailToolTip.IsEnabled}" Value="True">
                        <Setter Property="ToolTip" Value="{Binding Detail}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="DetailToolTipBasePanel" TargetType="{x:Type Panel}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=Root, Path=DataContext.DetailToolTip.IsPanelEnabled}" Value="True">
                        <Setter Property="ToolTip" Value="{Binding Detail}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ThumbnailTextDockPanelStyle" TargetType="{x:Type DockPanel}" BasedOn="{StaticResource DetailToolTipDockPanel}">
                <Setter Property="Visibility" Value="{Binding Source={x:Static local:Config.Current}, Path=Panels.ThumbnailItemProfile.IsTextVisible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <Setter Property="MinHeight" Value="18"/>
            </Style>

            <DataTemplate x:Key="NormalTemplate">
                <DockPanel Style="{StaticResource DetailToolTipDockPanel}" MinHeight="20">
                    <Image DockPanel.Dock="Right" Style="{StaticResource FolderIconStyle}" Margin="1" />
                    <TextBlock x:Name="FileNameTextBlock" Style="{StaticResource NormalNameStyle}" Margin="5,1" />
                </DockPanel>
            </DataTemplate>

            <DataTemplate x:Key="ContentTemplace">
                <DockPanel Margin="2">
                    <DockPanel>
                        <local:PanelListContentImage Thumbnail="{Binding ArchivePage.Thumbnail}" />
                        <DockPanel Style="{StaticResource DetailToolTipDockPanel}">
                            <Image DockPanel.Dock="Right" Style="{StaticResource FolderIconStyle}" />
                            <StackPanel VerticalAlignment="Center">
                                <TextBlock x:Name="Place" Style="{StaticResource NoteTextStyle}" Text="{Binding DisplayPlace}"
                                    Visibility="{Binding ElementName=ListBox, Path=DataContext.IsGroupBy, Converter={StaticResource BooleanToVisibilityInverseConverter}}" />
                                <TextBlock x:Name="FileNameTextBlock" Style="{StaticResource ContentNameStyle}" />
                            </StackPanel>
                        </DockPanel>
                    </DockPanel>
                </DockPanel>
            </DataTemplate>

            <DataTemplate x:Key="BannerTemplate">
                <DockPanel Margin="0" HorizontalAlignment="Stretch" LastChildFill="False">
                    <DockPanel DockPanel.Dock="Bottom" Style="{StaticResource DetailToolTipDockPanel}" Margin="2">
                        <Image DockPanel.Dock="Right" Style="{StaticResource FolderIconStyle}" />
                        <TextBlock x:Name="FileNameTextBlock" Style="{StaticResource BannerrNameStyle}" />
                    </DockPanel>
                    <local:PanelListBannerImage Thumbnail="{Binding ArchivePage.Thumbnail}" />
                </DockPanel>
            </DataTemplate>

            <DataTemplate x:Key="ThumbnailTemplate">
                <StackPanel Style="{StaticResource DetailToolTipBasePanel}" Margin="5" Width="{Binding Source={x:Static local:Config.Current}, Path=Panels.ThumbnailItemProfile.ShapeWidth}">
                    <Grid>
                        <local:PanelListThumbnailImage Thumbnail="{Binding ArchivePage.Thumbnail}" />
                        <StackPanel Style="{StaticResource OverrideIconStackPanelStyle}">
                            <Image DockPanel.Dock="Right" Style="{StaticResource FolderIconStyle}" VerticalAlignment="Top"/>
                        </StackPanel>
                    </Grid>
                    <Rectangle DockPanel.Dock="Bottom" Margin="-5,0,-5,1" Height="4" Visibility="Hidden"/>
                    <DockPanel Style="{StaticResource ThumbnailTextDockPanelStyle}">
                        <Image DockPanel.Dock="Right" Style="{StaticResource FolderIconStyle}" VerticalAlignment="Top"/>
                        <TextBlock x:Name="FileNameTextBlock" Style="{StaticResource ThumbnailNameStyle}" HorizontalAlignment="Center"/>
                    </DockPanel>
                </StackPanel>
            </DataTemplate>

            <Style x:Key="ListBoxItemStyle" TargetType="ListBoxItem" BasedOn="{StaticResource NVListBoxItem}">
                <EventSetter Event="PreviewMouseLeftButtonDown" Handler="PlaylistListItem_MouseLeftButtonDown" />
                <EventSetter Event="MouseLeftButtonUp" Handler="PlaylistListItem_MouseLeftButtonUp" />
                <EventSetter Event="PreviewMouseDoubleClick" Handler="PlaylistListItem_MouseDoubleClick" />
                <EventSetter Event="KeyDown" Handler="PlaylistListItem_KeyDown" />
                <EventSetter Event="ContextMenuOpening" Handler="PlaylistItem_ContextMenuOpening" />
                <Setter Property="FocusVisualStyle" Value="{StaticResource NVListItemFocusVisual}" />
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ListBoxItemBorderStyle" TargetType="ListBoxItem" BasedOn="{StaticResource ListBoxItemStyle}">
                <Setter Property="BorderBrush" Value="{DynamicResource Item.Separator}" />
            </Style>

            <Style x:Key="ListBoxItemThumbnailStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}">
                <Setter Property="local:ListBoxItemTools.InnerMargin" Value="0" />
            </Style>

            <Style x:Key="IconButtonStyle" TargetType="Button" BasedOn="{StaticResource IconButton}">
                <Setter Property="Width" Value="28" />
                <Setter Property="MinHeight" Value="{DynamicResource FontIconSize}" />
                <Setter Property="Padding" Value="2" />
            </Style>

            <Style x:Key="RepeatButtonStyle" TargetType="RepeatButton" BasedOn="{StaticResource IconRepeatButton}">
                <Setter Property="Width" Value="28" />
                <Setter Property="MinHeight" Value="{DynamicResource FontIconSize}" />
                <Setter Property="Padding" Value="2" />
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>


    <DockPanel x:Name="Root" KeyboardNavigation.TabNavigation="Local">
        <DockPanel DockPanel.Dock="Top" LastChildFill="False">
            <Button x:Name="AddButton" Style="{StaticResource IconButtonStyle}" Command="{x:Static local:PlaylistListBox.AddCommand}" IsEnabled="{Binding IsAddButtonEnabled}" TabIndex="1">
                <Image Source="{StaticResource ic_add_24px_a}" />
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="{properties:TextBinding Playlist.FirstIn}" IsChecked="{Binding IsFirstIn}" IsCheckable="True" />
                        <MenuItem Header="{properties:TextBinding Playlist.LastIn}" IsChecked="{Binding IsLastIn}" IsCheckable="True" />
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <nwc:ModifierRepeatButton x:Name="MoveUpButton" Style="{StaticResource RepeatButtonStyle}" Command="{x:Static local:PlaylistListBox.MoveUpCommand}" TabIndex="1">
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="{StaticResource ic_keyboard_arrow_up_24px}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsCtrlPressed, RelativeSource={RelativeSource AncestorType=nwc:ModifierRepeatButton}}" Value="True">
                                    <Setter Property="Source" Value="{StaticResource ic_keyboard_double_arrow_up_24px}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <RepeatButton.ToolTip>
                    <ToolTip Content="{properties:TextBinding Playlist.MoveUpButtonTips}"/>
                </RepeatButton.ToolTip>
            </nwc:ModifierRepeatButton>

            <nwc:ModifierRepeatButton x:Name="MoveDownButton" Style="{StaticResource RepeatButtonStyle}" Command="{x:Static local:PlaylistListBox.MoveDownCommand}" TabIndex="1" >
                <Image>
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="{StaticResource ic_keyboard_arrow_down_24px}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsCtrlPressed, RelativeSource={RelativeSource AncestorType=nwc:ModifierRepeatButton}}" Value="True">
                                    <Setter Property="Source" Value="{StaticResource ic_keyboard_double_arrow_down_24px}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
                <RepeatButton.ToolTip>
                    <ToolTip Content="{properties:TextBinding Playlist.MoveDownButtonTips}"/>
                </RepeatButton.ToolTip>
            </nwc:ModifierRepeatButton>

            <Image DockPanel.Dock="Right" Width="24" Height="24" Margin="2,0" Source="{StaticResource ic_lock_outline_24px}" VerticalAlignment="Center"
                    Visibility="{Binding IsEditable, Converter={StaticResource BooleanToVisibilityInverseConverter}}" ToolTip="Read only" />

        </DockPanel>

        <Grid>
            <nw:ListBoxExtended x:Name="ListBox"
                                Focusable="True"
                                FontSize="{DynamicResource PanelFontSize}"
                                Background="Transparent"
                                TabIndex="2"
                                Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                ItemsSource="{Binding CollectionViewSource.View, NotifyOnTargetUpdated=True}"
                                SelectedItem="{Binding SelectedItem}"
                                TargetUpdated="PlaylistListBox_TargetUpdated"
                                KeyDown="PlaylistListBox_KeyDown"
                                SelectionChanged="PlaylistListBox_SelectionChanged"
                                IsVisibleChanged="PlaylistListBox_IsVisibleChanged"
                                AllowDrop="{Binding IsEditable}"
                                IsSimpleTextSearchEnabled="{Binding Source={x:Static local:Config.Current}, Path=Panels.IsTextSearchEnabled}">

                <ListBox.Style>
                    <Style TargetType="{x:Type nw:ListBoxExtended}" BasedOn="{StaticResource NVListBox}">
                        <Setter Property="ItemTemplate" Value="{StaticResource NormalTemplate}" />
                        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}" />
                        <Setter Property="FocusVisualStyle" Value="{StaticResource NVFocusVisual}" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
                        <Setter Property="VirtualizingPanel.ScrollUnit" Value="{StaticResource PanelScrollUnit}" />
                        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
                        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Source={x:Static local:Config.Current}, Path=Playlist.PanelListItemStyle}" Value="Content">
                                <Setter Property="ItemTemplate" Value="{StaticResource ContentTemplace}" />
                                <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBorderStyle}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static local:Config.Current}, Path=Playlist.PanelListItemStyle}" Value="Banner">
                                <Setter Property="ItemTemplate" Value="{StaticResource BannerTemplate}" />
                                <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBorderStyle}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Source={x:Static local:Config.Current}, Path=Playlist.PanelListItemStyle}" Value="Thumbnail">
                                <Setter Property="ItemTemplate" Value="{StaticResource ThumbnailTemplate}"/>
                                <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemThumbnailStyle}" />
                                <Setter Property="FixHomeAndEndKeyBehavior" Value="True"/>
                                <Setter Property="ItemsPanel">
                                    <Setter.Value>
                                        <ItemsPanelTemplate>
                                            <vwp:VirtualizingWrapPanel
                                                                   ItemSize="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=DataContext.ThumbnailItemSize}"
                                                                   MouseWheelDelta="{Binding Source={x:Static local:Config.Current}, Path=Panels.MouseWheelDelta}"
                                                                   />
                                        </ItemsPanelTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.Style>

                <ListBox.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.HeaderTemplate>
                            <DataTemplate>
                                <Border BorderThickness="0,1,0,0" BorderBrush="{DynamicResource Panel.Separator}" Margin="0,15,0,0">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding Name}" Foreground="{DynamicResource Panel.Header}" Margin="0,5" />
                                </Border>
                            </DataTemplate>
                        </GroupStyle.HeaderTemplate>
                        <GroupStyle.Panel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </GroupStyle.Panel>
                    </GroupStyle>
                </ListBox.GroupStyle>

                <b:Interaction.Behaviors>
                    <nw:ListBoxExtendedDragDropStartBehavior AllowedEffects="Copy, Scroll" AllowRightButtonDrag="True" DragBeginAsync="DragStartBehavior_DragBeginAsync"
                            DragDropHook="{x:Static local:DragDropWatcher.DragDropHook}" />
                </b:Interaction.Behaviors>

            </nw:ListBoxExtended>

            <Border Background="Transparent" Visibility="{Binding ErrorMessage, Converter={StaticResource StringNullOrWhiteSpaceToVisibilityInverseConverter}}" d:IsHidden="True">
                <StackPanel VerticalAlignment="Top" Margin="0,20">
                    <TextBlock Text="{properties:TextBinding Playlist.FailedToLoad}" HorizontalAlignment="Center" Margin="0,5" />
                    <TextBlock Text="{Binding ErrorMessage}" HorizontalAlignment="Center" Margin="0,5" TextWrapping="Wrap" />
                </StackPanel>
            </Border>
        </Grid>
    </DockPanel>

</UserControl>
